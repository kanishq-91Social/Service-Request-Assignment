/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.servicerequest.controller.generated;

import com.example.servicerequest.model.generated.ErrorRes;
import com.example.servicerequest.model.generated.ServiceDefinitionRequest;
import com.example.servicerequest.model.generated.ServiceDefinitionResponse;
import com.example.servicerequest.model.generated.ServiceDefinitionSearchRequest;
import com.example.servicerequest.model.generated.ServiceRequest;
import com.example.servicerequest.model.generated.ServiceResponse;
import com.example.servicerequest.model.generated.ServiceSearchRequest;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-06-14T12:42:44.555+05:30[Asia/Calcutta]")
@Validated
@Api(value = "service", description = "the service API")
public interface ServiceApi {

    default ServiceApiDelegate getDelegate() {
        return new ServiceApiDelegate() {};
    }

    /**
     * POST /service/definition/v1/_create
     *
     * @param serviceDefinitionRequest  (optional)
     * @return Request accepted. (status code 202)
     *         or Invalid input. (status code 400)
     */
    @ApiOperation(value = "", nickname = "serviceDefinitionV1CreatePost", notes = "", response = ServiceDefinitionResponse.class, tags={ "Service Definition", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Request accepted.", response = ServiceDefinitionResponse.class),
        @ApiResponse(code = 400, message = "Invalid input.", response = ErrorRes.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/service/definition/v1/_create",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ServiceDefinitionResponse> serviceDefinitionV1CreatePost(@ApiParam(value = "") @Valid @RequestBody(required = false) ServiceDefinitionRequest serviceDefinitionRequest) {
        return getDelegate().serviceDefinitionV1CreatePost(serviceDefinitionRequest);
    }


    /**
     * POST /service/definition/v1/_search
     *
     * @param serviceDefinitionSearchRequest  (optional)
     * @return Request accepted. (status code 202)
     *         or Invalid input. (status code 400)
     */
    @ApiOperation(value = "", nickname = "serviceDefinitionV1SearchPost", notes = "", response = ServiceDefinitionResponse.class, tags={ "Service Definition", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Request accepted.", response = ServiceDefinitionResponse.class),
        @ApiResponse(code = 400, message = "Invalid input.", response = ErrorRes.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/service/definition/v1/_search",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ServiceDefinitionResponse> serviceDefinitionV1SearchPost(@ApiParam(value = "") @Valid @RequestBody(required = false) ServiceDefinitionSearchRequest serviceDefinitionSearchRequest) {
        return getDelegate().serviceDefinitionV1SearchPost(serviceDefinitionSearchRequest);
    }


    /**
     * POST /service/v1/_create
     *
     * @param serviceRequest  (optional)
     * @return Request accepted. (status code 202)
     *         or Invalid input. (status code 400)
     */
    @ApiOperation(value = "", nickname = "serviceV1CreatePost", notes = "", response = ServiceResponse.class, tags={ "Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Request accepted.", response = ServiceResponse.class),
        @ApiResponse(code = 400, message = "Invalid input.", response = ErrorRes.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/service/v1/_create",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ServiceResponse> serviceV1CreatePost(@ApiParam(value = "") @Valid @RequestBody(required = false) ServiceRequest serviceRequest) {
        return getDelegate().serviceV1CreatePost(serviceRequest);
    }


    /**
     * POST /service/v1/_search
     *
     * @param serviceSearchRequest  (optional)
     * @return Request accepted. (status code 202)
     *         or Invalid input. (status code 400)
     */
    @ApiOperation(value = "", nickname = "serviceV1SearchPost", notes = "", response = ServiceResponse.class, tags={ "Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 202, message = "Request accepted.", response = ServiceResponse.class),
        @ApiResponse(code = 400, message = "Invalid input.", response = ErrorRes.class) })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/service/v1/_search",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ServiceResponse> serviceV1SearchPost(@ApiParam(value = "") @Valid @RequestBody(required = false) ServiceSearchRequest serviceSearchRequest) {
        return getDelegate().serviceV1SearchPost(serviceSearchRequest);
    }

}
